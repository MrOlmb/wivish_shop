generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id      String @id @default(uuid())
  name    String
  email   String @unique
  picture String @db.Text
  role    Role   @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stores Store[] @relation("UserStores")
}

model Category {
  id       String  @id @default(uuid())
  name     String  @unique
  image    String
  url      String  @unique
  featured Boolean @default(false)

  subCategories SubCategory[] @relation("CategoryToSubcategory")
  products      Product[]     @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id       String  @id @default(uuid())
  name     String  @unique
  image    String
  url      String  @unique
  featured Boolean @default(false)

  categoryId String
  category   Category  @relation("CategoryToSubcategory", fields: [categoryId], references: [id])
  products   Product[] @relation("SubCategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id                     String      @id @default(uuid())
  name                   String
  description            String      @db.Text
  email                  String      @unique
  phone                  String
  url                    String      @unique
  logo                   String
  cover                  String
  status                 StoreStatus @default(PENDING)
  averageRating          Float       @default(0)
  featured               Boolean     @default(false)
  returnPolicy           String?
  defaultShippingService String?
  defaultShippingFees    Float?
  defaultDeliveryTimeMin Int?
  defaultDeliveryTimeMax Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user     User      @relation("UserStores", fields: [userId], references: [id])
  products Product[] @relation("StoreToProduct")

  @@index([userId])
}

enum ShippingFeeMethod {
  ITEM
  KG
  FIXED
}

model Product {
  id                String            @id @default(uuid())
  name              String
  description       String            @db.Text
  slug              String            @unique
  brand             String
  rating            Float             @default(0)
  sales             Int               @default(0)
  numReviews        Int               @default(0)
  shippingFeeMethod ShippingFeeMethod @default(ITEM)
  views             Int               @default(0)
  freeShippingForAllCountries Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId           String
  store             Store      @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId        String
  category          Category   @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subCategoryId     String
  subCategory       SubCategory @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id])

  variants          ProductVariant[] @relation("ProductToProductVariant")
  specs             Spec[]           @relation("ProductSpec")

  @@index([storeId])
  @@index([categoryId])
  @@index([subCategoryId])
}

model ProductVariant {
  id                 String  @id @default(uuid())
  variantName        String
  variantDescription String? @db.Text
  variantImage       String
  slug               String  @unique
  sku                String  @unique
  sales              Int     @default(0)
  weight             Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId         String
  product           Product @relation("ProductToProductVariant", fields: [productId], references: [id])

  sizes             Size[]  @relation("ProductVariantSizes")
  colors            Color[] @relation("ProductVariantColors")
  specs             Spec[]  @relation("ProductVariantSpec")
  images            ProductVariantImage[] @relation("ProductVariantImages")

  @@index([productId])
}

model Size {
  id                String  @id @default(uuid())
  size              String
  quantity          Int
  price             Float
  discount          Float   @default(0)

  productVariantId  String
  productVariant    ProductVariant @relation("ProductVariantSizes", fields: [productVariantId], references: [id])

  @@index([productVariantId])
}

model Color {
  id                String  @id @default(uuid())
  color             String

  productVariantId  String
  productVariant    ProductVariant @relation("ProductVariantColors", fields: [productVariantId], references: [id])

  @@index([productVariantId])
}

model ProductVariantImage {
  id                String  @id @default(uuid())
  url               String

  productVariantId  String
  productVariant    ProductVariant @relation("ProductVariantImages", fields: [productVariantId], references: [id])

  @@index([productVariantId])
}

model Spec {
  id                String  @id @default(uuid())
  name              String
  value             String

  productId         String?
  product           Product? @relation("ProductSpec", fields: [productId], references: [id])
  
  productVariantId  String?
  productVariant    ProductVariant? @relation("ProductVariantSpec", fields: [productVariantId], references: [id])

  @@index([productId])
  @@index([productVariantId])
}
